<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="USER_HAS_SKILL" xml:space="preserve">
    <value>User already has this skill</value>
  </data>
  <data name="EMAIL_FORMAT" xml:space="preserve">
    <value>Wrong e-mail format</value>
  </data>
  <data name="PASSWORD_LENGTH" xml:space="preserve">
    <value>Password length must be greather or equal 8</value>
  </data>
  <data name="EMAIL_EXISTS" xml:space="preserve">
    <value>This e-mail already exists</value>
  </data>
  <data name="EMAIL_NOT_EXISTS" xml:space="preserve">
    <value>User with this e-mail doesn't exists</value>
  </data>
  <data name="INVALID_EMAIL_TOKEN" xml:space="preserve">
    <value>The email confirmation token is invalid</value>
  </data>
  <data name="EMAIL_OR_PASSWORD_INVALID" xml:space="preserve">
    <value>E-mail or password invalid
</value>
  </data>
  <data name="USER_DOESNT_EXISTS" xml:space="preserve">
    <value>This user does not exists</value>
  </data>
  <data name="USER_NOT_AUTHENTICATED" xml:space="preserve">
    <value>User must be authenticated to access this</value>
  </data>
  <data name="INVALID_URL_FORMAT" xml:space="preserve">
    <value>Invalid url format</value>
  </data>
  <data name="INVALID_GITHUB_PROFILE" xml:space="preserve">
    <value>Github profile doesn't exist</value>
  </data>
  <data name="REQUEST_GITHUB_ERROR" xml:space="preserve">
    <value>Can't connect on github server</value>
  </data>
  <data name="PROFILE_NOT_EXISTS" xml:space="preserve">
    <value>Profile does not exist</value>
  </data>
  <data name="PROFILE_PRIVATE" xml:space="preserve">
    <value>This profile is private</value>
  </data>
  <data name="SKILL_NOT_EXISTS" xml:space="preserve">
    <value>This skill does not exist</value>
  </data>
  <data name="SKILLS_NOT_EXISTS" xml:space="preserve">
    <value>The following skills doesn't exist</value>
  </data>
  <data name="ONLY_ACCEPT_PENDING_CONNECTION" xml:space="preserve">
    <value>Only can accept pending connections</value>
  </data>
  <data name="ALREADY_CONNECTED" xml:space="preserve">
    <value>User already is connected to profile</value>
  </data>
  <data name="CONNECT_WITH_YOURSELF" xml:space="preserve">
    <value>User can't connect with themself</value>
  </data>
  <data name="CONNECTION_BY_ID_NOT_EXISTS" xml:space="preserve">
    <value>Invalid connection id, connection does not exist</value>
  </data>
  <data name="OUT_OF_RANGE_PER_PAGE_MAX_100" xml:space="preserve">
    <value>Items per page is out of range, the limit is 100</value>
  </data>
  <data name="INVALID_ID_FORMAT" xml:space="preserve">
    <value>Invalid id format</value>
  </data>
  <data name="PASSWORD_INVALID" xml:space="preserve">
    <value>Current password is wrong</value>
  </data>
  <data name="ERROR_ON_LOCATION" xml:space="preserve">
    <value>An error occured while trying to get request location</value>
  </data>
  <data name="UPDATE_WITH_THE_SAME_PASSWORD" xml:space="preserve">
    <value>The new password cannot be equal the old password</value>
  </data>
</root>